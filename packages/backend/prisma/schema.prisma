generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  username  String      @unique @db.Text
  email     String      @unique @db.Text
  password  String      @db.Text
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  auth      Auth[]
  bookmarks Bookmarks[]
  viewed    Viewed[]
}

model Auth {
  id           String   @id @default(uuid()) @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String   @db.Uuid
  refreshToken String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Movie {
  id          String      @id @default(uuid()) @db.Uuid
  title       String      @db.Text
  description String      @db.Text
  tagline     String?      @db.Text
  releaseDate DateTime?
  runtime     Int?
  budget      BigInt?
  revenue     BigInt?
  poster      String?      @db.Text
  trailer     String?      @db.Text
  averageRate Decimal?     @db.Decimal(3, 2)
  countVotes  BigInt?
  megogoLink    String?
  genres      Genre[]
  countries   Country[]
  directors     Director[]
  actors      Actor[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  Bookmarks   Bookmarks[]
  Viewed      Viewed[]
}

model Actor {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.Text
  surname   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movies    Movie[]
}

model Director {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.Text
  surname   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  movies    Movie[]
}

model Genre {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  movies    Movie[]
}

model Country {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  movies    Movie[]
}

model Bookmarks {
  id        String   @id @default(uuid()) @db.Uuid
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Viewed {
  id        String   @id @default(uuid()) @db.Uuid
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  rate      Decimal?  @db.Decimal(3, 2)
  description String? @db.Text
  private   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
